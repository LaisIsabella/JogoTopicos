// Carregar vari√°veis de ambiente
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

// Verificar se as vari√°veis est√£o configuradas
if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Erro: Vari√°veis SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rias!');
    console.log('Crie um arquivo .env na raiz do projeto com suas credenciais do Supabase.');
    console.log('Exemplo:');
    console.log('SUPABASE_URL=https://seu-projeto.supabase.co');
    console.log('SUPABASE_ANON_KEY=sua-chave-anonima');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type']
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname, 'public')));

// Middleware para logging
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
});

// Fun√ß√£o para calcular estat√≠sticas da sess√£o
function calculateSessionStats(responses) {
    const totalQuestions = responses.length;
    const correctAnswers = responses.filter(r => r.correct).length;
    const percentage = Math.round((correctAnswers / totalQuestions) * 100);
    
    return {
        total_questions: totalQuestions,
        correct_answers: correctAnswers,
        percentage: percentage
    };
}

// Rota para registrar uma sess√£o completa de jogo
app.post('/registrar', async (req, res) => {
    console.log('üìù Recebendo dados do jogo...');
    console.log('Body:', JSON.stringify(req.body, null, 2));
    
    try {
        const { timestamp, responses } = req.body;
        
        // Valida√ß√£o b√°sica
        if (!timestamp || !responses || !Array.isArray(responses) || responses.length === 0) {
            console.error('‚ùå Dados inv√°lidos recebidos');
            return res.status(400).json({ 
                error: 'Dados inv√°lidos', 
                received: { timestamp, responsesLength: responses?.length }
            });
        }

        const startTime = new Date(timestamp);
        const endTime = new Date();
        const durationSeconds = Math.round((endTime - startTime) / 1000);
        
        // Obter IP e User Agent para analytics
        const userIP = req.ip || req.connection.remoteAddress || 'unknown';
        const userAgent = req.get('User-Agent') || 'unknown';
        
        console.log('üîç Dados processados:', {
            startTime,
            endTime,
            durationSeconds,
            responsesCount: responses.length,
            userIP,
            userAgent: userAgent.substring(0, 100) // Truncar para evitar problemas
        });
        
        // Calcular estat√≠sticas da sess√£o
        const sessionStats = calculateSessionStats(responses);
        console.log('üìä Estat√≠sticas da sess√£o:', sessionStats);
        
        // Preparar dados da sess√£o (compat√≠vel com UUID e DECIMAL)
        const sessionData = {
            total_questions: sessionStats.total_questions,
            correct_answers: sessionStats.correct_answers,
            percentage: parseFloat(sessionStats.percentage.toFixed(2)), // DECIMAL(5,2)
            duration_seconds: durationSeconds,
            user_ip: userIP, // INET type
            user_agent: userAgent.substring(0, 500) // Limitar tamanho
        };

        console.log('üíæ Inserindo sess√£o no banco...');
        console.log('Dados da sess√£o:', sessionData);

        // Inserir sess√£o principal
        const { data: session, error: sessionError } = await supabase
            .from('game_sessions')
            .insert([sessionData])
            .select()
            .single();

        if (sessionError) {
            console.error('‚ùå Erro ao criar sess√£o:', sessionError);
            return res.status(500).json({ 
                error: 'Erro ao criar sess√£o',
                details: sessionError.message,
                code: sessionError.code
            });
        }

        console.log('‚úÖ Sess√£o criada com sucesso! ID:', session.id);

        // Preparar dados das respostas individuais
        const responsesData = responses.map((response, index) => {
            const responseData = {
                session_id: session.id,
                topic: response.topic || 'T√≥pico n√£o informado',
                is_cs_related: Boolean(response.isCSRelated),
                was_selected: Boolean(response.selected),
                is_correct: Boolean(response.correct),
                time_spent_seconds: response.timeSpent || 10,
                question_order: index + 1
            };
            
            console.log(`üìù Resposta ${index + 1}:`, responseData);
            return responseData;
        });

        console.log('üíæ Inserindo respostas no banco...');
        console.log(`Total de respostas: ${responsesData.length}`);

        // Inserir todas as respostas em batch
        const { error: responsesError } = await supabase
            .from('game_responses')
            .insert(responsesData);

        if (responsesError) {
            console.error('‚ùå Erro ao salvar respostas:', responsesError);
            return res.status(500).json({ 
                error: 'Erro ao salvar respostas',
                details: responsesError.message,
                code: responsesError.code,
                sessionId: session.id // Retorna o ID da sess√£o mesmo se as respostas falharam
            });
        }

        console.log('‚úÖ Respostas salvas com sucesso!');

        const result = { 
            message: 'Dados registrados com sucesso!',
            sessionId: session.id,
            stats: sessionStats,
            timestamp: new Date().toISOString()
        };

        console.log('üéâ Resposta enviada:', result);
        res.json(result);

    } catch (err) {
        console.error('‚ùå Erro interno:', err);
        console.error('Stack trace:', err.stack);
        res.status(500).json({ 
            error: 'Erro interno do servidor',
            message: err.message
        });
    }
});

// Rota para testar conectividade
app.get('/test-db', async (req, res) => {
    try {
        console.log('üß™ Testando conectividade do banco...');
        
        const { count, error } = await supabase
            .from('game_sessions')
            .select('*', { count: 'exact', head: true });
        
        if (error) {
            console.error('‚ùå Erro no teste:', error);
            return res.status(500).json({ 
                error: 'Erro de conectividade',
                details: error.message
            });
        }
        
        console.log('‚úÖ Banco conectado com sucesso!');
        res.json({ 
            message: 'Banco conectado com sucesso!',
            totalSessions: count
        });
        
    } catch (err) {
        console.error('‚ùå Erro no teste:', err);
        res.status(500).json({ 
            error: 'Erro no teste de conectividade',
            message: err.message
        });
    }
});

// Rota para obter analytics b√°sicas (opcional)
app.get('/analytics', async (req, res) => {
    try {
        const { data: sessions, error } = await supabase
            .from('game_sessions')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(10);

        if (error) {
            console.error('Erro ao buscar analytics:', error);
            return res.status(500).json({ error: 'Erro ao buscar analytics' });
        }

        res.json({
            totalSessions: sessions.length,
            sessions: sessions
        });
    } catch (err) {
        console.error('Erro interno:', err);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Rota para gerar an√°lise em formato tabular
app.get('/analysis', async (req, res) => {
    try {
        console.log('üìä Gerando an√°lise tabular...');
        
        // Lista completa de t√≥picos
        const allTopics = [
            // T√≥picos CS
            "Abordagens curriculares envolvendo etnicidade, g√™nero, direitos humanos e inclus√£o",
            "Anal√≠ticas de aprendizagem (learning analytics) em computa√ß√£o",
            "Aspectos demogr√°ficos, sociais e econ√¥micos de cursos de computa√ß√£o",
            "Aspectos raciais/√©tnicos na educa√ß√£o em computa√ß√£o",
            "Aspectos √©ticos na educa√ß√£o em computa√ß√£o",
            "Avalia√ß√£o automatizada de tarefas de programa√ß√£o",
            "Avalia√ß√£o da aprendizagem em computa√ß√£o",
            "Avalia√ß√£o de pensamento computacional",
            "Computa√ß√£o desplugada",
            "Computa√ß√£o na educa√ß√£o infantil",
            "Computa√ß√£o na educa√ß√£o profissional",
            "Computa√ß√£o no ensino fundamental",
            "Computa√ß√£o no ensino m√©dio",
            "Comunidades discentes em cursos de computa√ß√£o",
            "Concep√ß√µes e organiza√ß√µes curriculares em computa√ß√£o",
            "Curriculariza√ß√£o da pesquisa e da extens√£o em computa√ß√£o",
            "Did√°tica de computa√ß√£o",
            "Diversidade em cursos de computa√ß√£o",
            "Educa√ß√£o continuada em computa√ß√£o",
            "Educa√ß√£o corporativa em computa√ß√£o",
            "Educa√ß√£o de jovens e adultos em computa√ß√£o",
            "Educa√ß√£o em computa√ß√£o aberta e livre (e.g. REA, MOOC)",
            "Educa√ß√£o em computa√ß√£o atrav√©s do uso de imagens, √°udio e v√≠deo",
            "Educa√ß√£o em computa√ß√£o em espa√ßos n√£o-formais",
            "Ensino e/ou aprendizagem de computa√ß√£o",
            "Estrat√©gias de ensino e/ou aprendizagem de computa√ß√£o",
            "Estudos de g√™nero na educa√ß√£o em computa√ß√£o",
            "Estudos secund√°rios: revis√µes sistem√°ticas e mapeamentos sistem√°ticos",
            "Est√°gio supervisionado na forma√ß√£o de professores de computa√ß√£o",
            "Evas√£o e reten√ß√£o em cursos e disciplinas de computa√ß√£o",
            "Fatores psicol√≥gicos e emocionais em educa√ß√£o em computa√ß√£o",
            "Feedback de tarefas de programa√ß√£o",
            "Forma√ß√£o cient√≠fica em cursos de computa√ß√£o",
            "Forma√ß√£o continuada de professores em computa√ß√£o",
            "Forma√ß√£o inicial de professores em computa√ß√£o",
            "Forma√ß√£o na p√≥s-gradua√ß√£o em computa√ß√£o",
            "Habilidades t√©cnicas (hard skills) e n√£o-t√©cnicas (soft skills) em computa√ß√£o",
            "Hardware na educa√ß√£o em computa√ß√£o",
            "Implanta√ß√£o e avalia√ß√£o continuada de curr√≠culos, programas e cursos de computa√ß√£o",
            "Inclus√£o e acessibilidade na educa√ß√£o em computa√ß√£o",
            "Integra√ß√£o dos conte√∫dos exigidos por legisla√ß√£o em curr√≠culos de computa√ß√£o",
            "Intelig√™ncia artificial e aprendizado de m√°quina na educa√ß√£o em computa√ß√£o",
            "Intera√ß√£o entre academia e ind√∫stria de TI",
            "Jogos e gamifica√ß√£o na educa√ß√£o em computa√ß√£o",
            "Linguagens visuais e textuais para aprendizagem de programa√ß√£o",
            "Materiais did√°ticos de computa√ß√£o",
            "Mentoria na gradua√ß√£o e p√≥s-gradua√ß√£o em computa√ß√£o",
            "Metacogni√ß√£o na educa√ß√£o em computa√ß√£o",
            "Metodologias ativas no ensino e/ou aprendizagem de computa√ß√£o",
            "Minera√ß√£o de dados educacionais em computa√ß√£o",
            "Modelos de monitoria e apoio discente em disciplinas de gradua√ß√£o",
            "M√©todos e estrat√©gias para concep√ß√£o de curr√≠culos, programas e cursos de computa√ß√£o",
            "Pensamento computacional",
            "Programa√ß√£o na educa√ß√£o superior",
            "Pr√°tica de ensino de computa√ß√£o na forma√ß√£o de professores",
            "Psicologia da programa√ß√£o",
            "Realidade virtual e aumentada na educa√ß√£o em computa√ß√£o",
            "Recursos de apoio √† educa√ß√£o em computa√ß√£o",
            "Redes e m√≠dias sociais em educa√ß√£o em computa√ß√£o",
            "Rob√≥tica na educa√ß√£o em computa√ß√£o",
            "Saberes docentes na computa√ß√£o",
            "Teorias educacionais e psicol√≥gicas aplicadas √† educa√ß√£o em computa√ß√£o",
            // T√≥picos n√£o-CS
            "Marketing Digital",
            "Teoria dos jogos",
            "Sistemas el√©tricos"
        ];

        // Buscar sess√µes com respostas
        const { data: sessions, error } = await supabase
            .from('game_sessions')
            .select(`
                id,
                created_at,
                total_questions,
                correct_answers,
                percentage,
                duration_seconds,
                user_ip,
                game_responses (
                    topic,
                    is_cs_related,
                    was_selected,
                    is_correct,
                    time_spent_seconds,
                    question_order
                )
            `)
            .order('created_at', { ascending: false });

        if (error) {
            return res.status(500).json({ error: error.message });
        }

        // Processar dados
        const analysisData = sessions.map((session, sessionIndex) => {
            const row = {
                session_id: session.id,
                session_number: sessionIndex + 1,
                date: new Date(session.created_at).toLocaleString('pt-BR'),
                total_questions: session.total_questions,
                correct_answers: session.correct_answers,
                percentage: session.percentage,
                duration_seconds: session.duration_seconds,
                user_ip: session.user_ip
            };

            // Mapa de respostas
            const responseMap = {};
            session.game_responses.forEach(response => {
                responseMap[response.topic] = response;
            });

            // Para cada t√≥pico, adicionar c√≥digo de resposta
            allTopics.forEach(topic => {
                const response = responseMap[topic];
                const columnName = topic.split(' ').slice(0, 3).join('_').toLowerCase()
                    .replace(/[^a-z0-9_]/g, '');
                
                if (!response) {
                    row[columnName] = 0; // N√£o apareceu
                } else {
                    row[columnName] = response.was_selected ? 2 : 1; // 2=clicou, 1=n√£o clicou
                    row[`${columnName}_correct`] = response.is_correct ? 1 : 0;
                    row[`${columnName}_time`] = response.time_spent_seconds;
                    row[`${columnName}_order`] = response.question_order;
                }
            });

            return row;
        });

        // Gerar estat√≠sticas por t√≥pico
        const topicStats = {};
        const topicColumns = Object.keys(analysisData[0] || {}).filter(key => 
            !key.includes('session') && 
            !key.includes('date') && 
            !key.includes('total') && 
            !key.includes('correct') && 
            !key.includes('percentage') && 
            !key.includes('duration') && 
            !key.includes('user_ip') &&
            !key.endsWith('_correct') && 
            !key.endsWith('_time') && 
            !key.endsWith('_order')
        );

        topicColumns.forEach(column => {
            const responses = analysisData.map(row => row[column]).filter(val => val !== undefined);
            const appeared = responses.filter(val => val > 0);
            const clicked = responses.filter(val => val === 2);
            
            if (appeared.length > 0) {
                topicStats[column] = {
                    total_appearances: appeared.length,
                    total_clicks: clicked.length,
                    click_rate: (clicked.length / appeared.length * 100).toFixed(2),
                    non_click_rate: ((appeared.length - clicked.length) / appeared.length * 100).toFixed(2)
                };
            }
        });

        res.json({
            total_sessions: sessions.length,
            analysis_data: analysisData,
            topic_statistics: topicStats,
            legend: {
                response_codes: {
                    "0": "T√≥pico n√£o apareceu nesta sess√£o",
                    "1": "T√≥pico apareceu, mas jogador N√ÉO clicou",
                    "2": "T√≥pico apareceu e jogador CLICOU"
                },
                additional_columns: {
                    "_correct": "1 se resposta correta, 0 se incorreta",
                    "_time": "Tempo gasto na pergunta (segundos)",
                    "_order": "Ordem em que a pergunta apareceu"
                }
            }
        });

    } catch (err) {
        console.error('Erro na an√°lise:', err);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Rota para baixar CSV da an√°lise
app.get('/analysis/csv', async (req, res) => {
    try {
        // Reutilizar l√≥gica da rota /analysis (seria melhor extrair para fun√ß√£o)
        // Por simplicidade, redirecionando para explica√ß√£o
        res.setHeader('Content-Type', 'text/plain; charset=utf-8');
        res.send(`Para gerar o CSV com an√°lise completa:

1. Execute: node sistema-analise.js
2. Isso criar√° os arquivos:
   - analise_respostas_completa.csv
   - estatisticas_topicos.json
   - legenda_analise.txt

Ou acesse: GET /analysis para ver os dados em JSON
`);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});
app.get('/topic-stats', async (req, res) => {
    try {
        const { data: topicStats, error } = await supabase
            .from('game_responses')
            .select('topic, is_correct')
            .order('created_at', { ascending: false })
            .limit(1000);

        if (error) {
            console.error('Erro ao buscar estat√≠sticas de t√≥picos:', error);
            return res.status(500).json({ error: 'Erro ao buscar estat√≠sticas' });
        }

        // Processar estat√≠sticas por t√≥pico
        const topicData = {};
        topicStats.forEach(response => {
            if (!topicData[response.topic]) {
                topicData[response.topic] = { total: 0, correct: 0 };
            }
            topicData[response.topic].total++;
            if (response.is_correct) {
                topicData[response.topic].correct++;
            }
        });

        // Calcular percentuais e ordenar por dificuldade
        const processedStats = Object.entries(topicData)
            .map(([topic, stats]) => ({
                topic,
                total_responses: stats.total,
                correct_responses: stats.correct,
                success_rate: Math.round((stats.correct / stats.total) * 100),
                difficulty_rank: Math.round(((stats.total - stats.correct) / stats.total) * 100)
            }))
            .sort((a, b) => a.success_rate - b.success_rate);

        res.json(processedStats);
    } catch (err) {
        console.error('Erro interno:', err);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Rota fallback para SPA
app.get('*', (req, res) => {
    const indexPath = path.join(__dirname, 'index.html');
    
    if (require('fs').existsSync(indexPath)) {
        res.sendFile(indexPath);
    } else {
        res.send(`
            <h1>üéÆ Servidor do Jogo de T√≥picos</h1>
            <p>Servidor funcionando em: <strong>http://localhost:${PORT}</strong></p>
            <h2>üîó Rotas dispon√≠veis:</h2>
            <ul>
                <li><a href="/test-db">GET /test-db</a> - Testar conectividade do banco</li>
                <li><a href="/analytics">GET /analytics</a> - Ver sess√µes recentes</li>
                <li><a href="/topic-stats">GET /topic-stats</a> - Estat√≠sticas dos t√≥picos</li>
                <li><a href="/analysis">GET /analysis</a> - An√°lise tabular completa (JSON)</li>
                <li><a href="/analysis/csv">GET /analysis/csv</a> - Como gerar CSV</li>
                <li>POST /registrar - Registrar uma sess√£o de jogo</li>
            </ul>
            <p>Coloque seu arquivo <code>index.html</code> na raiz do projeto para servir o jogo.</p>
        `);
    }
});

// Tratamento de erros global
app.use((err, req, res, next) => {
    console.error('‚ùå Erro n√£o tratado:', err);
    res.status(500).json({
        error: 'Erro interno do servidor',
        message: err.message
    });
});

app.listen(PORT, () => {
    console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
    console.log('üìä Configura√ß√£o do Supabase:', {
        url: supabaseUrl ? '‚úÖ Configurada' : '‚ùå N√£o configurada',
        key: supabaseKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada'
    });
    console.log('\nüîó Rotas dispon√≠veis:');
    console.log(`   GET  http://localhost:${PORT}/test-db - Testar banco`);
    console.log(`   GET  http://localhost:${PORT}/analytics - Analytics`);
    console.log(`   GET  http://localhost:${PORT}/analysis - An√°lise tabular`);
    console.log(`   POST http://localhost:${PORT}/registrar - Registrar jogo`);
    console.log('\nüí° Para gerar CSV: node sistema-analise.js');
});