// sistema-analise.js
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Lista completa de todos os t√≥picos poss√≠veis
const allTopics = [
    // T√≥picos de CS
    "Abordagens curriculares envolvendo etnicidade, g√™nero, direitos humanos e inclus√£o",
    "Anal√≠ticas de aprendizagem (learning analytics) em computa√ß√£o",
    "Aspectos demogr√°ficos, sociais e econ√¥micos de cursos de computa√ß√£o",
    "Aspectos raciais/√©tnicos na educa√ß√£o em computa√ß√£o",
    "Aspectos √©ticos na educa√ß√£o em computa√ß√£o",
    "Avalia√ß√£o automatizada de tarefas de programa√ß√£o",
    "Avalia√ß√£o da aprendizagem em computa√ß√£o",
    "Avalia√ß√£o de pensamento computacional",
    "Computa√ß√£o desplugada",
    "Computa√ß√£o na educa√ß√£o infantil",
    "Computa√ß√£o na educa√ß√£o profissional",
    "Computa√ß√£o no ensino fundamental",
    "Computa√ß√£o no ensino m√©dio",
    "Comunidades discentes em cursos de computa√ß√£o",
    "Concep√ß√µes e organiza√ß√µes curriculares em computa√ß√£o",
    "Curriculariza√ß√£o da pesquisa e da extens√£o em computa√ß√£o",
    "Did√°tica de computa√ß√£o",
    "Diversidade em cursos de computa√ß√£o",
    "Educa√ß√£o continuada em computa√ß√£o",
    "Educa√ß√£o corporativa em computa√ß√£o",
    "Educa√ß√£o de jovens e adultos em computa√ß√£o",
    "Educa√ß√£o em computa√ß√£o aberta e livre (e.g. REA, MOOC)",
    "Educa√ß√£o em computa√ß√£o atrav√©s do uso de imagens, √°udio e v√≠deo",
    "Educa√ß√£o em computa√ß√£o em espa√ßos n√£o-formais",
    "Ensino e/ou aprendizagem de computa√ß√£o",
    "Estrat√©gias de ensino e/ou aprendizagem de computa√ß√£o",
    "Estudos de g√™nero na educa√ß√£o em computa√ß√£o",
    "Estudos secund√°rios: revis√µes sistem√°ticas e mapeamentos sistem√°ticos",
    "Est√°gio supervisionado na forma√ß√£o de professores de computa√ß√£o",
    "Evas√£o e reten√ß√£o em cursos e disciplinas de computa√ß√£o",
    "Fatores psicol√≥gicos e emocionais em educa√ß√£o em computa√ß√£o",
    "Feedback de tarefas de programa√ß√£o",
    "Forma√ß√£o cient√≠fica em cursos de computa√ß√£o",
    "Forma√ß√£o continuada de professores em computa√ß√£o",
    "Forma√ß√£o inicial de professores em computa√ß√£o",
    "Forma√ß√£o na p√≥s-gradua√ß√£o em computa√ß√£o",
    "Habilidades t√©cnicas (hard skills) e n√£o-t√©cnicas (soft skills) em computa√ß√£o",
    "Hardware na educa√ß√£o em computa√ß√£o",
    "Implanta√ß√£o e avalia√ß√£o continuada de curr√≠culos, programas e cursos de computa√ß√£o",
    "Inclus√£o e acessibilidade na educa√ß√£o em computa√ß√£o",
    "Integra√ß√£o dos conte√∫dos exigidos por legisla√ß√£o em curr√≠culos de computa√ß√£o",
    "Intelig√™ncia artificial e aprendizado de m√°quina na educa√ß√£o em computa√ß√£o",
    "Intera√ß√£o entre academia e ind√∫stria de TI",
    "Jogos e gamifica√ß√£o na educa√ß√£o em computa√ß√£o",
    "Linguagens visuais e textuais para aprendizagem de programa√ß√£o",
    "Materiais did√°ticos de computa√ß√£o",
    "Mentoria na gradua√ß√£o e p√≥s-gradua√ß√£o em computa√ß√£o",
    "Metacogni√ß√£o na educa√ß√£o em computa√ß√£o",
    "Metodologias ativas no ensino e/ou aprendizagem de computa√ß√£o",
    "Minera√ß√£o de dados educacionais em computa√ß√£o",
    "Modelos de monitoria e apoio discente em disciplinas de gradua√ß√£o",
    "M√©todos e estrat√©gias para concep√ß√£o de curr√≠culos, programas e cursos de computa√ß√£o",
    "Pensamento computacional",
    "Programa√ß√£o na educa√ß√£o superior",
    "Pr√°tica de ensino de computa√ß√£o na forma√ß√£o de professores",
    "Psicologia da programa√ß√£o",
    "Realidade virtual e aumentada na educa√ß√£o em computa√ß√£o",
    "Recursos de apoio √† educa√ß√£o em computa√ß√£o",
    "Redes e m√≠dias sociais em educa√ß√£o em computa√ß√£o",
    "Rob√≥tica na educa√ß√£o em computa√ß√£o",
    "Saberes docentes na computa√ß√£o",
    "Teorias educacionais e psicol√≥gicas aplicadas √† educa√ß√£o em computa√ß√£o",
    // T√≥picos n√£o-CS
    "Marketing Digital",
    "Teoria dos jogos",
    "Sistemas el√©tricos"
];

// Mapeamento de resposta: 0 = N√£o apareceu, 1 = Apareceu e n√£o clicou, 2 = Apareceu e clicou
function getResponseCode(response) {
    if (!response) return 0; // N√£o apareceu
    return response.was_selected ? 2 : 1; // 2 = clicou, 1 = n√£o clicou
}

// Fun√ß√£o para gerar a an√°lise em formato tabular
async function generateAnalysisTable() {
    try {
        console.log('üìä Gerando an√°lise tabular...');
        
        // Buscar todas as sess√µes com suas respostas
        const { data: sessions, error } = await supabase
            .from('game_sessions')
            .select(`
                id,
                created_at,
                total_questions,
                correct_answers,
                percentage,
                duration_seconds,
                user_ip,
                game_responses (
                    topic,
                    is_cs_related,
                    was_selected,
                    is_correct,
                    time_spent_seconds,
                    question_order
                )
            `)
            .order('created_at', { ascending: false });

        if (error) {
            console.error('‚ùå Erro ao buscar dados:', error);
            return;
        }

        console.log(`‚úÖ Encontradas ${sessions.length} sess√µes`);

        // Preparar dados para a tabela
        const analysisData = [];
        
        sessions.forEach((session, sessionIndex) => {
            const row = {
                session_id: session.id,
                session_number: sessionIndex + 1,
                date: new Date(session.created_at).toLocaleString('pt-BR'),
                total_questions: session.total_questions,
                correct_answers: session.correct_answers,
                percentage: session.percentage,
                duration_seconds: session.duration_seconds,
                user_ip: session.user_ip
            };

            // Criar um mapa das respostas desta sess√£o
            const responseMap = {};
            session.game_responses.forEach(response => {
                responseMap[response.topic] = response;
            });

            // Para cada t√≥pico poss√≠vel, verificar se apareceu e qual foi a resposta
            allTopics.forEach(topic => {
                const response = responseMap[topic];
                const responseCode = getResponseCode(response);
                
                // Usar nome simplificado para as colunas (primeiras palavras)
                const columnName = topic.split(' ').slice(0, 3).join('_').toLowerCase()
                    .replace(/[^a-z0-9_]/g, ''); // Remove caracteres especiais
                
                row[columnName] = responseCode;
                
                // Adicionar informa√ß√µes extras se o t√≥pico apareceu
                if (response) {
                    row[`${columnName}_correct`] = response.is_correct ? 1 : 0;
                    row[`${columnName}_time`] = response.time_spent_seconds;
                    row[`${columnName}_order`] = response.question_order;
                }
            });

            analysisData.push(row);
        });

        return analysisData;

    } catch (error) {
        console.error('‚ùå Erro geral:', error);
        return null;
    }
}

// Fun√ß√£o para exportar para CSV
function exportToCSV(data, filename = 'analise_respostas.csv') {
    if (!data || data.length === 0) {
        console.log('‚ùå Nenhum dado para exportar');
        return;
    }

    // Cabe√ßalhos
    const headers = Object.keys(data[0]);
    
    // Criar conte√∫do CSV
    let csvContent = headers.join(',') + '\n';
    
    data.forEach(row => {
        const values = headers.map(header => {
            const value = row[header];
            // Tratar valores nulos/undefined
            if (value === null || value === undefined) return '';
            // Escapar aspas se necess√°rio
            if (typeof value === 'string' && value.includes(',')) {
                return `"${value.replace(/"/g, '""')}"`;
            }
            return value;
        });
        csvContent += values.join(',') + '\n';
    });

    // Salvar arquivo
    fs.writeFileSync(filename, csvContent, 'utf8');
    console.log(`‚úÖ Arquivo ${filename} criado com sucesso!`);
    console.log(`üìÑ ${data.length} linhas exportadas`);
}

// Fun√ß√£o para gerar legenda dos c√≥digos
function generateLegend() {
    const legend = `
üìã LEGENDA DOS C√ìDIGOS DE RESPOSTA:
==================================

Para cada t√≥pico, temos as seguintes colunas:
- [topico]: C√≥digo de resposta (0, 1 ou 2)
- [topico]_correct: Se a resposta foi correta (1) ou incorreta (0)
- [topico]_time: Tempo gasto na pergunta (segundos)
- [topico]_order: Ordem em que a pergunta apareceu

C√ìDIGOS DE RESPOSTA:
- 0 = T√≥pico n√£o apareceu nesta sess√£o
- 1 = T√≥pico apareceu, mas o jogador N√ÉO clicou
- 2 = T√≥pico apareceu e o jogador CLICOU

AN√ÅLISE RECOMENDADA:
====================

1. TAXA DE CLIQUES POR T√ìPICO:
   - Contar quantos "2" cada t√≥pico teve
   - Dividir pelo total de apari√ß√µes (1 + 2)

2. TAXA DE ACERTO POR T√ìPICO:
   - Somar os valores "_correct" para cada t√≥pico
   - Dividir pelo total de apari√ß√µes

3. DIFICULDADE PERCEBIDA:
   - T√≥picos com muitos erros podem ser confusos
   - T√≥picos CS com c√≥digo 1 = jogador perdeu pontos
   - T√≥picos n√£o-CS com c√≥digo 2 = jogador perdeu pontos

4. TEMPO DE RESPOSTA:
   - T√≥picos com maior tempo podem ser mais dif√≠ceis
   - Comparar tempo m√©dio entre t√≥picos CS e n√£o-CS

5. POSI√á√ÉO DA PERGUNTA:
   - Verificar se a posi√ß√£o influencia na taxa de acerto
   - Primeiras perguntas vs. √∫ltimas perguntas
`;

    fs.writeFileSync('legenda_analise.txt', legend, 'utf8');
    console.log('üìã Legenda salva em legenda_analise.txt');
}

// Fun√ß√£o para criar estat√≠sticas por t√≥pico
function generateTopicStats(data) {
    const stats = {};
    
    // Identificar todas as colunas de t√≥picos (que n√£o terminam com _correct, _time, _order)
    const topicColumns = Object.keys(data[0]).filter(key => 
        !key.includes('session') && 
        !key.includes('date') && 
        !key.includes('total') && 
        !key.includes('correct') && 
        !key.includes('percentage') && 
        !key.includes('duration') && 
        !key.includes('user_ip') &&
        !key.endsWith('_correct') && 
        !key.endsWith('_time') && 
        !key.endsWith('_order')
    );

    topicColumns.forEach(column => {
        const responses = data.map(row => row[column]).filter(val => val !== undefined);
        const appeared = responses.filter(val => val > 0); // 1 ou 2
        const clicked = responses.filter(val => val === 2);
        
        if (appeared.length > 0) {
            stats[column] = {
                total_appearances: appeared.length,
                total_clicks: clicked.length,
                click_rate: (clicked.length / appeared.length * 100).toFixed(2) + '%',
                non_click_rate: ((appeared.length - clicked.length) / appeared.length * 100).toFixed(2) + '%'
            };
        }
    });

    // Salvar estat√≠sticas
    const statsContent = JSON.stringify(stats, null, 2);
    fs.writeFileSync('estatisticas_topicos.json', statsContent, 'utf8');
    console.log('üìä Estat√≠sticas por t√≥pico salvas em estatisticas_topicos.json');
    
    return stats;
}

// Fun√ß√£o principal
async function main() {
    console.log('üöÄ Iniciando an√°lise dos dados...\n');
    
    const data = await generateAnalysisTable();
    
    if (!data) {
        console.log('‚ùå Falha ao gerar dados de an√°lise');
        return;
    }

    console.log('\nüìà Exportando dados...');
    
    // Exportar CSV principal
    exportToCSV(data, 'analise_respostas_completa.csv');
    
    // Gerar estat√≠sticas
    const stats = generateTopicStats(data);
    
    // Gerar legenda
    generateLegend();
    
    console.log('\n‚úÖ An√°lise conclu√≠da!');
    console.log('üìÅ Arquivos gerados:');
    console.log('   - analise_respostas_completa.csv (dados principais)');
    console.log('   - estatisticas_topicos.json (estat√≠sticas por t√≥pico)');
    console.log('   - legenda_analise.txt (explica√ß√£o dos c√≥digos)');
    
    console.log('\nüìä Resumo dos dados:');
    console.log(`   - ${data.length} sess√µes analisadas`);
    console.log(`   - ${Object.keys(stats).length} t√≥picos √∫nicos encontrados`);
    
    // Mostrar alguns t√≥picos mais clicados
    const sortedStats = Object.entries(stats)
        .sort((a, b) => b[1].total_clicks - a[1].total_clicks)
        .slice(0, 5);
    
    console.log('\nüîù Top 5 t√≥picos mais clicados:');
    sortedStats.forEach(([topic, stat], index) => {
        console.log(`   ${index + 1}. ${topic}: ${stat.total_clicks} cliques (${stat.click_rate})`);
    });
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = {
    generateAnalysisTable,
    exportToCSV,
    generateTopicStats
};